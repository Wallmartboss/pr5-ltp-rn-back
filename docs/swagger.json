{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Task Pro app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Task Pro app."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000"
    },
    {
      "url": "https://pr5-ltp-rn-back.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Users",
      "description": "User profile and settings operations."
    },
    {
      "name": "Boards",
      "description": "Operations for managing boards."
    },
    {
      "name": "Columns",
      "description": "Operations for managing columns."
    },
    {
      "name": "Cards",
      "description": "Operations for managing tasks."
    },
    {
      "name": "Help",
      "description": "Possibility of sending a letter with a comment about help to the address - Taskpro.project@gmail.com"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a user",
        "operationId": "registerUser",
        "description": "Register a new user with payload",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name (2-32 characters, allows alphanumeric and special characters)",
                    "type": "string",
                    "example": "John_Doe-123",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^[a-zA-Z0-9!@#$%^&*()_+\\=\\[\\]{}|;:\\`\",.<>?/-]*$"
                  },
                  "email": {
                    "description": "User's email (must contain '@')",
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com",
                    "pattern": "/^[a-zA-Z0-9!#$%^&`*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%^&`*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z0-9-]{2,}$/"
                  },
                  "password": {
                    "description": "User's password (8-64 characters, allows alphanumeric and special characters)",
                    "type": "string",
                    "format": "password",
                    "example": "P@ssw0rd!123",
                    "minLength": 8,
                    "maxLength": 64,
                    "pattern": "^[a-zA-Z0-9!@#$%^&*()_+\\=\\[\\]{}|;:\\`\",.<>?/-]*$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Register a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "userLogin",
        "description": "Login with email and password",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email (must contain '@')",
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com",
                    "pattern": "/^[a-zA-Z0-9!#$%^&`*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%^&`*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z0-9-]{2,}$/"
                  },
                  "password": {
                    "description": "User's password (8-64 characters, allows alphanumeric and special characters)",
                    "type": "string",
                    "format": "password",
                    "example": "P@ssw0rd!123",
                    "minLength": 8,
                    "maxLength": 64,
                    "pattern": "^[a-zA-Z0-9!@#$%^&*()_+\\=\\[\\]{}|;:\\`\",.<>?/-]*$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "token"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in!"
                    },
                    "token": {
                      "type": "string",
                      "example": "Bearer token_string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "userLogout",
        "description": "Log out the user, invalidating the authentication token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully logged out."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve current user profile",
        "operationId": "getCurrentUser",
        "description": "Fetch the profile details of the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved user profile."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/info": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "operationId": "updateUser",
        "description": "Update user. To update, you must specify at least one field.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "avatar"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's name",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "avatar": {
                    "description": "User's avatar",
                    "type": "string"
                  }
                },
                "description": "Update at least one of the fields"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Update user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User updated successfully!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/theme": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update theme",
        "operationId": "uodateTheme",
        "description": "Update the selected theme in the user profile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "theme"
                ],
                "properties": {
                  "theme": {
                    "description": "User's theme",
                    "type": "string",
                    "enum": [
                      "light",
                      "dark",
                      "violet"
                    ],
                    "example": "dark",
                    "default": "dark"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated theme settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Theme updated successfully!"
                    },
                    "data": {
                      "type": "object",
                      "example": "dark"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/boards": {
      "post": {
        "tags": [
          "Boards"
        ],
        "summary": "Create a new board",
        "operationId": "createBoard",
        "description": "Creates a new board with the specified title, background, icon, and owner.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "description": "Title of the board",
                    "type": "string",
                    "example": "Project office"
                  },
                  "icon": {
                    "description": "Icon for the board",
                    "type": "string",
                    "enum": [
                      "4dot",
                      "star",
                      "circle",
                      "puzzle",
                      "cube",
                      "lighting",
                      "3-circle",
                      "octagon"
                    ],
                    "example": "4dot",
                    "default": "4dot"
                  },
                  "background": {
                    "description": "Background image for blackboard",
                    "type": "string",
                    "enum": [
                      "default-bg-mob",
                      "bg1-2x-mob.jpg",
                      "bg2-2x-mob.jpg",
                      "bg3-2x-mob.jpg",
                      "bg4-2x-mob.jpg",
                      "bg5-2x-mob.jpg",
                      "bg6-2x-mob.jpg",
                      "bg7-2x-mob.jpg",
                      "bg8-2x-mob.jpg",
                      "bg9-2x-mob.jpg",
                      "bg10-2x-mob.jpg",
                      "bg11-2x-mob.jpg",
                      "bg12-2x-mob.jpg",
                      "bg13-2x-mob.jpg",
                      "bg14-2x-mob.jpg",
                      "bg15-2x-mob.jpg",
                      "default-bg-tab",
                      "bg1-2x-tab.jpg",
                      "bg2-2x-tab.jpg",
                      "bg3-2x-tab.jpg",
                      "bg4-2x-tab.jpg",
                      "bg5-2x-tab.jpg",
                      "bg6-2x-tab.jpg",
                      "bg7-2x-tab.jpg",
                      "bg8-2x-tab.jpg",
                      "bg9-2x-tab.jpg",
                      "bg10-2x-tab.jpg",
                      "bg11-2x-tab.jpg",
                      "bg12-2x-tab.jpg",
                      "bg13-2x-tab.jpg",
                      "bg14-2x-tab.jpg",
                      "bg15-2x-tab.jpg",
                      "default-bg-desk",
                      "bg1-2x-desk.jpg",
                      "bg2-2x-desk.jpg",
                      "bg3-2x-desk.jpg",
                      "bg4-2x-desk.jpg",
                      "bg5-2x-desk.jpg",
                      "bg6-2x-desk.jpg",
                      "bg7-2x-desk.jpg",
                      "bg8-2x-desk.jpg",
                      "bg9-2x-desk.jpg",
                      "bg10-2x-desk.jpg",
                      "bg11-2x-desk.jpg",
                      "bg12-2x-desk.jpg",
                      "bg13-2x-desk.jpg",
                      "bg14-2x-desk.jpg",
                      "bg15-2x-desk.jpg"
                    ],
                    "example": "default-bg-desk",
                    "default": "default-bg-desk"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Board successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Board created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/board"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Get boards list",
        "operationId": "getBoards",
        "description": "Get a list of all boards.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found boards!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found boards!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/board"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/boards/{id}": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Get board by id",
        "operationId": "getBoard",
        "description": "Get board by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get board by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found board with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/board"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Boards"
        ],
        "summary": "Update board by id",
        "operationId": "updateBoard",
        "description": "Update board by ID. To update, you must specify at least one field.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the board",
            "example": "645f7a1e3a1e8c2a5d8e1b0c"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "icon"
                ],
                "properties": {
                  "title": {
                    "description": "Title of the board",
                    "type": "string",
                    "example": "Project office"
                  },
                  "icon": {
                    "description": "Icon for the board",
                    "type": "string",
                    "enum": [
                      "4dot",
                      "star",
                      "circle",
                      "puzzle",
                      "cube",
                      "lighting",
                      "3-circle",
                      "octagon"
                    ],
                    "example": "4dot",
                    "default": "4dot"
                  },
                  "background": {
                    "description": "Background image for blackboard",
                    "type": "string",
                    "enum": [
                      "default-bg-mob",
                      "bg1-2x-mob.jpg",
                      "bg2-2x-mob.jpg",
                      "bg3-2x-mob.jpg",
                      "bg4-2x-mob.jpg",
                      "bg5-2x-mob.jpg",
                      "bg6-2x-mob.jpg",
                      "bg7-2x-mob.jpg",
                      "bg8-2x-mob.jpg",
                      "bg9-2x-mob.jpg",
                      "bg10-2x-mob.jpg",
                      "bg11-2x-mob.jpg",
                      "bg12-2x-mob.jpg",
                      "bg13-2x-mob.jpg",
                      "bg14-2x-mob.jpg",
                      "bg15-2x-mob.jpg",
                      "default-bg-tab",
                      "bg1-2x-tab.jpg",
                      "bg2-2x-tab.jpg",
                      "bg3-2x-tab.jpg",
                      "bg4-2x-tab.jpg",
                      "bg5-2x-tab.jpg",
                      "bg6-2x-tab.jpg",
                      "bg7-2x-tab.jpg",
                      "bg8-2x-tab.jpg",
                      "bg9-2x-tab.jpg",
                      "bg10-2x-tab.jpg",
                      "bg11-2x-tab.jpg",
                      "bg12-2x-tab.jpg",
                      "bg13-2x-tab.jpg",
                      "bg14-2x-tab.jpg",
                      "bg15-2x-tab.jpg",
                      "default-bg-desk",
                      "bg1-2x-desk.jpg",
                      "bg2-2x-desk.jpg",
                      "bg3-2x-desk.jpg",
                      "bg4-2x-desk.jpg",
                      "bg5-2x-desk.jpg",
                      "bg6-2x-desk.jpg",
                      "bg7-2x-desk.jpg",
                      "bg8-2x-desk.jpg",
                      "bg9-2x-desk.jpg",
                      "bg10-2x-desk.jpg",
                      "bg11-2x-desk.jpg",
                      "bg12-2x-desk.jpg",
                      "bg13-2x-desk.jpg",
                      "bg14-2x-desk.jpg",
                      "bg15-2x-desk.jpg"
                    ],
                    "example": "default-bg-desk",
                    "default": "default-bg-desk"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Board successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a board!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/board"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Boards"
        ],
        "summary": "Delete board by id",
        "operationId": "deleteBoard",
        "description": "Delete board by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted board"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/columns": {
      "post": {
        "tags": [
          "Columns"
        ],
        "summary": "Create a new column",
        "operationId": "createColumn",
        "description": "Creates a new column with the specified title.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "description": "Title of the column",
                    "type": "string",
                    "example": "New Column"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Column successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Column created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/column"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Columns"
        ],
        "summary": "Get columns list",
        "operationId": "getColumns",
        "description": "Get a list of all columns.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found columns!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found columns!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/column"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/columns/{id}": {
      "patch": {
        "tags": [
          "Columns"
        ],
        "summary": "Update column by id",
        "operationId": "updateColumn",
        "description": "Update column by ID. To update, you must specify at least one field.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the column",
            "example": "645f7a1e3a1e8c2a5d8e1b0c"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "description": "Title of the column",
                    "type": "string",
                    "example": "Done"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Column successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a column!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/column"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Columns"
        ],
        "summary": "Delete column by id",
        "operationId": "deleteColumn",
        "description": "Delete column by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted column"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Create a new card",
        "operationId": "creatCard",
        "description": "Creates a new card with the specified title.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "deadline"
                ],
                "properties": {
                  "title": {
                    "description": "Title of the card",
                    "type": "string",
                    "example": "New card"
                  },
                  "description": {
                    "description": "Detailed description of the card",
                    "type": "string",
                    "example": "Create a visually stunning and eye-catching watch dial desing..."
                  },
                  "priority": {
                    "description": "Priority level of the card",
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "without"
                    ],
                    "example": "without",
                    "default": "without"
                  },
                  "deadline": {
                    "description": "Deadline for completing card",
                    "type": "string",
                    "format": "date",
                    "example": "12/11/2024"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Column created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/card"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards/boardId": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Get a list of cards by board ID",
        "operationId": "getCardsByBoardId",
        "description": "Retrieve a list of all cards associated with a specific board using the board ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "boardId"
                ],
                "properties": {
                  "boardId": {
                    "type": "string",
                    "description": "ID of the board to fetch cards from",
                    "example": "64c2f12e8db21b9f5e1a1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cards retrieved successfully for boardId 64c2f12e8db21b9f5e1a1234",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Cards retrieved successfully for boardId 64c2f12e8db21b9f5e1a1234"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/card"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards/{id}": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Get card by id",
        "operationId": "getCard",
        "description": "Get card by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the card.",
              "example": "6702865b0b15384575dc30fa"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get card by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found the card!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/card"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Cards"
        ],
        "summary": "Update card by id",
        "operationId": "updateCard",
        "description": "Update card by ID. To update, you must specify at least one field.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the card",
            "example": "645f7a1e3a1e8c2a5d8e1b0c"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "description"
                ],
                "properties": {
                  "title": {
                    "description": "Title of the card",
                    "type": "string",
                    "example": "The Watch Sport Design"
                  },
                  "description": {
                    "description": "Detailed description of the card",
                    "type": "string",
                    "example": "Create a visually stunning and eye-catching watch dial desing..."
                  },
                  "priority": {
                    "description": "Priority level of the card",
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "without"
                    ],
                    "example": "without",
                    "default": "without"
                  },
                  "label color": {
                    "description": "Color associated with the priority level",
                    "type": "string",
                    "enum": [
                      "#8FA1D0",
                      "#E09CB5",
                      "#BEDBB0",
                      "#161616"
                    ],
                    "example": "#161616",
                    "default": "#161616"
                  },
                  "deadline": {
                    "description": "Deadline for completing card",
                    "type": "string",
                    "format": "date",
                    "example": "12/11/2024"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a card!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/card"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Cards"
        ],
        "summary": "Delete card by id",
        "operationId": "deleteCard",
        "description": "Delete card by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted card"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cards/move": {
      "patch": {
        "tags": [
          "Cards"
        ],
        "summary": "Move card to a different column",
        "operationId": "moveCardById",
        "description": "Move a card to a specified column by providing the card ID and target column ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cardId",
                  "columnId"
                ],
                "properties": {
                  "cardId": {
                    "type": "string",
                    "description": "ID of the target card that will be moved.",
                    "example": "645f7a1e3a1e8c2a5d8e1b0c"
                  },
                  "columnId": {
                    "type": "string",
                    "description": "ID of the target column where the card will be moved",
                    "example": "64b3f12e4dcb23a8c7f6a34e"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card successfully moved to the target column",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Card moved successfully!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/card"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/help": {
      "post": {
        "tags": [
          "Help"
        ],
        "summary": "Send help request email",
        "operationId": "sendHelpRequest",
        "description": "Allows users to send a help request email with comments or questions to Taskpro support.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "subject",
                  "message"
                ],
                "properties": {
                  "email": {
                    "description": "User email address to receive a response",
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "message": {
                    "description": "Detailed message with comments or questions",
                    "type": "string",
                    "example": "I need help with creating a new column in my project."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully send message about help",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Help request sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "66f6c3f8313287b622b71110"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "user@example.com"
          },
          "theme": {
            "description": "User's theme",
            "enum": [
              "light",
              "dark",
              "violet"
            ],
            "example": "dark",
            "default": "dark"
          },
          "avatar": {
            "description": "User's avatar",
            "type": "string",
            "format": "binary"
          },
          "createdAt": {
            "description": "Date and time the user was originally created",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-06T12:45:15.699Z"
          },
          "updatedAt": {
            "description": "Date and time the user was last modified",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-06T12:45:15.699Z"
          },
          "versionKey": {
            "description": "Indicates whether the document version key is included. Set to false to exclude the version key (__v) in the response.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "card": {
        "type": "object",
        "required": [
          "title",
          "description",
          "priority",
          "deadline"
        ],
        "properties": {
          "_id": {
            "description": "card's unique identifier",
            "type": "string",
            "example": "6702865b0b15384575dc30fa"
          },
          "title": {
            "description": "Title of the card",
            "type": "string",
            "example": "The Watch Sport Design"
          },
          "description": {
            "description": "Detailed description of the card",
            "type": "string",
            "example": "Create a visually stunning and eye-catching watch dial desing..."
          },
          "priority": {
            "description": "Priority level of the card",
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "without"
            ],
            "example": "without",
            "default": "without"
          },
          "deadline": {
            "description": "Deadline for completing card",
            "type": "string",
            "format": "date",
            "example": "12/11/2024"
          },
          "column": {
            "description": "Column the card belongs to",
            "type": "string",
            "example": "In Progress"
          },
          "owner": {
            "description": "ID of the user who owns the board",
            "type": "string",
            "example": "66f6c3f8313287b622b71110"
          },
          "actions": {
            "type": "object",
            "description": "Clickable buttons and icon associated with the card",
            "properties": {
              "deadlineIcon": {
                "description": "Icon that appears when the current date matches the deadline",
                "type": "boolean",
                "example": true
              },
              "moveButton": {
                "description": "Clickable button to move the card to another column",
                "type": "string",
                "example": "arrow-circle-broken-right"
              },
              "editButton": {
                "description": "Clickable button with an icon for editing the card details",
                "type": "string",
                "example": "pencil-01"
              },
              "deleteButton": {
                "description": "Clickable button with an icon for deleting the card",
                "type": "string",
                "example": "trash-04"
              }
            }
          },
          "createdAt": {
            "description": "Date and time the card was originally created",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-06T12:45:15.699Z"
          },
          "updatedAt": {
            "description": "Date and time the card was last modified",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-06T12:45:15.699Z"
          },
          "versionKey": {
            "description": "Indicates whether the document version key is included",
            "type": "boolean",
            "example": false
          }
        }
      },
      "column": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "_id": {
            "description": "Unique identifier for the column",
            "type": "string",
            "example": "635f3c37e3187a9b6d56d1a1"
          },
          "title": {
            "description": "Title of the column",
            "type": "string",
            "example": "In Progress"
          },
          "cards": {
            "description": "List of cards associated with this column",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/card"
            }
          },
          "owner": {
            "description": "ID of the user who owns the board",
            "type": "string",
            "example": "66f6c3f8313287b622b71110"
          },
          "actions": {
            "type": "object",
            "description": "Functional buttons represented as icons to perform actions on the column",
            "properties": {
              "editButton": {
                "description": "Clickable button with an icon for editing the column details",
                "type": "string",
                "example": "pencil-01"
              },
              "deleteButton": {
                "description": "Clickable button with an icon for deleting the column",
                "type": "string",
                "example": "trash-04"
              }
            }
          },
          "createdAt": {
            "description": "Timestamp of when the column was created",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-06T12:45:15.699Z"
          },
          "updatedAt": {
            "description": "Timestamp of the last update to the column",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-07T12:45:15.699Z"
          },
          "versionKey": {
            "description": "Indicates whether the document version key is included. Set to false to exclude the version key (__v) in the response.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "board": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "_id": {
            "description": "Unique identifier for the board",
            "type": "string",
            "example": "645f7a1e3a1e8c2a5d8e1b0c"
          },
          "title": {
            "description": "Title of the board",
            "type": "string",
            "example": "Project office"
          },
          "icon": {
            "description": "Icon for the board",
            "type": "string",
            "enum": [
              "4dot",
              "star",
              "circle",
              "puzzle",
              "cube",
              "lighting",
              "3-circle",
              "octagon"
            ],
            "example": "4dot",
            "default": "4dot"
          },
          "background": {
            "description": "Background image for blackboard",
            "type": "string",
            "enum": [
              "default-bg-mob",
              "bg1-2x-mob.jpg",
              "bg2-2x-mob.jpg",
              "bg3-2x-mob.jpg",
              "bg4-2x-mob.jpg",
              "bg5-2x-mob.jpg",
              "bg6-2x-mob.jpg",
              "bg7-2x-mob.jpg",
              "bg8-2x-mob.jpg",
              "bg9-2x-mob.jpg",
              "bg10-2x-mob.jpg",
              "bg11-2x-mob.jpg",
              "bg12-2x-mob.jpg",
              "bg13-2x-mob.jpg",
              "bg14-2x-mob.jpg",
              "bg15-2x-mob.jpg",
              "default-bg-tab",
              "bg1-2x-tab.jpg",
              "bg2-2x-tab.jpg",
              "bg3-2x-tab.jpg",
              "bg4-2x-tab.jpg",
              "bg5-2x-tab.jpg",
              "bg6-2x-tab.jpg",
              "bg7-2x-tab.jpg",
              "bg8-2x-tab.jpg",
              "bg9-2x-tab.jpg",
              "bg10-2x-tab.jpg",
              "bg11-2x-tab.jpg",
              "bg12-2x-tab.jpg",
              "bg13-2x-tab.jpg",
              "bg14-2x-tab.jpg",
              "bg15-2x-tab.jpg",
              "default-bg-desk",
              "bg1-2x-desk.jpg",
              "bg2-2x-desk.jpg",
              "bg3-2x-desk.jpg",
              "bg4-2x-desk.jpg",
              "bg5-2x-desk.jpg",
              "bg6-2x-desk.jpg",
              "bg7-2x-desk.jpg",
              "bg8-2x-desk.jpg",
              "bg9-2x-desk.jpg",
              "bg10-2x-desk.jpg",
              "bg11-2x-desk.jpg",
              "bg12-2x-desk.jpg",
              "bg13-2x-desk.jpg",
              "bg14-2x-desk.jpg",
              "bg15-2x-desk.jpg"
            ],
            "example": "default-bg-desk",
            "default": "default-bg-desk"
          },
          "columns": {
            "description": "List of columns and cards associated with the board",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/column"
            }
          },
          "owner": {
            "description": "ID of the user who owns the board",
            "type": "string",
            "example": "66f6c3f8313287b622b71110"
          },
          "actions": {
            "type": "object",
            "description": "Functional buttons represented as icons to perform actions on the board",
            "properties": {
              "editButton": {
                "description": "Clickable button with an icon for deleting the board",
                "type": "string",
                "example": "pencil-01"
              },
              "deleteButton": {
                "description": "Button to delete the board",
                "type": "string",
                "example": "trash-04"
              }
            }
          },
          "createdAt": {
            "description": "Date and time the board was originally created",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-06T12:45:15.699Z"
          },
          "updatedAt": {
            "description": "Date and time the board was last modified",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-07T12:45:15.699Z"
          },
          "versionKey": {
            "description": "Indicates whether the document version key is included. Set to false to exclude the version key (__v) in the response.",
            "type": "boolean",
            "example": false
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Conflict error",
        "content": {
          "aplication/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid password format or email."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Nothing was found for your request..."
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "aplication/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User already exists or email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "aplication/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}